    scalar Upload
    
    # response type
    interface ResponseType {
        # Response status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!
        # This is the message sent by the server about an operation
        message: String!
    }

    type CourseCategory {
        name: String!
        displayPicture: String!
        description: String!
        categoryId: String!
    }

    # This is the response type that returns no data
    type DatalessResponse implements ResponseType {
        # Response status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!
        # This is the message sent by the server about an operation
        message: String!
    }


    type CourseContent {
        keywords: String
        title: String!
        videoLink: String
        materials: String
        courseId: String!
        displayPicture: String!
        contentId: String!
        isCompleted: Boolean
    }

    type course {
        courseId: String!
        publish: Boolean!
        price: Int!
        name: String!
        description: String!
        displayPicture: String!
        category: CourseCategory
        funnelPage: String
        courseContent: [CourseContent]
        enrolled: Boolean,
        reviewScore: Float!
        enrolledCount: Float!
    }

    type GetCourseCategoriesResponse implements ResponseType {
        categories: [CourseCategory]
        code: Int!
        success: Boolean!
        message: String!
    }

    type CreateCourseCategoryResponse implements ResponseType {
        code: Int!
        success: Boolean!
        message: String!
    }

    input CreateCourseCategoryInput {
        name: String!
        image: Upload!
        about: String!
    }

    type CourseType {
        name: String!

    }

    input CreateCourseInput {
        name: String!
        price: Int!
        category: String!
        avatar: Upload!
        description: String!
    }

    input EditCourseDetailsInput {
        courseId: String!
        name: String!
        price: Int!
        category: String!
        avatar: Upload
        description: String!
        funnelPage: String!
    }

    type CreateNewCourseResponse {
        courseId: String
        code: Int!
        success: Boolean!
        message: String!
    }


    type createCourseContentRespose {
        contentId: String
        code: Int!
        success: Boolean!
        message: String!
    }

    

    input CreateCourseContentInput {
        courseId: String!
        title: String!
        videoLink: String
        avatar: Upload!
        courseMaterial: String
    }

    input EditCourseContentInput {
        courseId: String!
        title: String!
        videoLink: String
        avatar: Upload!
        contentId: String!
        courseMaterial: String!
    }

    type GetCourseContentResponse {
        courseDetails: course
        courseContent: [CourseContent]
        code: Int!
        success: Boolean!
        message: String!
    }

    type GetAllCourseResponse {
        courseDetails: course
        courses: [course]
        code: Int!
        success: Boolean!
        message: String!
    }

    type GetCourseDetails {
        course: course
        code: Int!
        success: Boolean!
        message: String!
    }

    input GetCourseContentInput {
        courseId: String!
    }

    input GetContentVideoInput {
        contentId: String!
    }

    input courseStatusInput {
        courseId: String!
        state: Boolean!
    }

    type GetContentVideoResponse {
        videoContent: CourseContent
        code: Int!
        success: Boolean!
        message: String!
    }

    type StudentGetAllCoursesResonse {
        courses: [course],
        code: Int!
        success: Boolean!
        message: String!
    }

    input EnrollCourseInput {
        courseId: String!
        transactionRef: String!
    }

    input StudentGetCourseVideo {
        courseId: String!
        contentId: String!
    }

    # This is the query type that will handle get category 
    type Query {
        GetAllCourseCategories: GetCourseCategoriesResponse
        GetCourseContent(input: GetCourseContentInput): GetCourseContentResponse
        GetAllCourses: GetAllCourseResponse
        GetContentVideo(input: GetContentVideoInput): GetContentVideoResponse
        studentGetAllCourses: StudentGetAllCoursesResonse
        StudentGetEnrolledCourses: StudentGetAllCoursesResonse
        StudentGetCourseContent(input: GetCourseContentInput): GetCourseContentResponse
        StudentGetCourseVideo(input: StudentGetCourseVideo): GetContentVideoResponse
    }

    
    type Mutation {
        CreateCourseCategory(input: CreateCourseCategoryInput): CreateCourseCategoryResponse
        CreateNewCourse(input: CreateCourseInput): CreateNewCourseResponse
        CreateCourseContent(input: CreateCourseContentInput): createCourseContentRespose
        PublishCourse(input: courseStatusInput): DatalessResponse
        EditCourseDetails(input: EditCourseDetailsInput): DatalessResponse
        EditCourseContent(input: EditCourseContentInput): DatalessResponse
        StudentEnrollCourse(input: EnrollCourseInput): DatalessResponse
        StudentMarkContentAsComplete(input: StudentGetCourseVideo): DatalessResponse
        StudentMarkCourseAsComplete(input: GetCourseContentInput): DatalessResponse
    }