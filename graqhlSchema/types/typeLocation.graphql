
# This are streets that are close by to another streets
# Street A is a primary street and close by streets will be B, C, and D
type closeBy {
    # Name of street
    streetName: String,
    # street id
    streetId: String
}

# the data of a street
type streetData {
    # street name
    streetName: String!,
    # street id
    streetId: String!
    # community data of the street
    community: CommunityData!
    # LGA data of the street
    lga: LgaData!
    # state data of the street
    state: StateData!
    # country data of the street
    country: CountryData!
    # streets that are close to the streets
    closeBy: [closeBy]
}

# community data
type communitySearchData {
    # community name
    communityName: String!
    # community id
    communityId: String!
    # lga data of the community
    lga: LgaData!
    # state data of the community
    state: StateData!
    # country data of the community
    country: CountryData!
}



type CountryData {
    # name of country
    name: String
    # country id
    countryId: String
}

type StateData {
    # name of state
    name: String
    # state id
    stateId: String
}

type CommunityData {
    # name of community
    name: String!
    # community id
    communityId: String!
}

type LgaData {
    # name of LGA
    name: String!
    # LGA id
    lgaId: String!
}

# this is what is returned when you search for a street
type returnStreetSearch implements responseType{
    # the data of the street which includes country, state, lga, community etc
    streetData: [streetData!],
    # response status code
    code: Int!
    # response status in boolean 
    success: Boolean!,
    # response message
    message: String!
}

type newLocationResponse implements responseType {
    # response status code
    code: Int!
    # response status in boolean 
    success: Boolean!,
    # response message
    message: String!
}

# this is what is returned when you search for a lga
type returnCommunitySearch implements responseType{
    # the data of the community which includes country, state, lga
    communityData: [communitySearchData!],
    code: Int!
    success: Boolean!,
    message: String!
}

type searchLgaData {
    lga: LgaData!
    state: StateData
}

# this is what is returned when you search for a community
type returnLgaSearch implements responseType{
    # the data of the community which includes country, state, lga
    lgaData: [searchLgaData],
    code: Int!
    success: Boolean!,
    message: String!
}

type returnAllStates implements responseType {
    states: [StateData]
    country: CountryData
    code: Int!
    success: Boolean!,
    message: String!
}


# street search input
input searchStreetInput{
    # keyword
    keyword: String!
    
}

input addNewLocation {
    userId: String!
    state: String!
    lga: String!
    community: String!
    street: String!
    proximity: String
}

type customerAddedLocation {
    itemId: String!
    userId: String!
    state: String!
    lga: String!
    community: String!
    street: String!
    proximity: String
}

input deleteCustomerLocation {
    itemId: String!
}

type CustomerAddedLocationResponse {
    location: [customerAddedLocation]
    code: Int!
    success: Boolean!
    message: String!
}

type returnLgaInState implements responseType {
    lgas: [LgaData]
    code: Int!
    success: Boolean!
    message: String!
}

type returnCommunitiesInLga implements responseType {
    communities: [CommunityData]
    code: Int!
    success: Boolean!,
    message: String!
}

input inputStateId {
    stateId: String!
}

input inputLgaId {
    lgaId: String!
}

input createCommunityInput {
    stateId: String!
    lgaId: String!
    newCommunities: String!
}

input createLgaInput {
    stateId: String!
    newLgas: String!
}

input createNewStreetInput {
    stateId: String!
    lgaId: String!
    communityId: String!
    newStreets: String!
}

input communityNameInput {
    communityId: String
}

type Query {
    # get street search
    GetStreet (input: searchStreetInput): returnStreetSearch
    # get community search
    GetCommunity (input: searchStreetInput): returnCommunitySearch

    GetAllCommunitiesInLga (input: inputLgaId): returnCommunitiesInLga

    # get lga search
    GetLga (input: searchStreetInput): returnLgaSearch

    GetAllStates: returnAllStates

    GetLgaForState (input: inputStateId): returnLgaInState

    GetStreetsInCommunity (input: communityNameInput): returnStreetSearch
    
    # customers who uploaded their location to be added
    GetCustomerAddedLocation: CustomerAddedLocationResponse

}

type Mutation {
    AddNewUserLocation (input: addNewLocation): newLocationResponse
    CreateNewStreet (input: createNewStreetInput): newLocationResponse
    CreateNewCommunities (input: createCommunityInput): newLocationResponse
    CreateNewLgas (input: createLgaInput): newLocationResponse

    # delete customer location
    DeleteCustomerAddedLocation (input: deleteCustomerLocation): newLocationResponse
}