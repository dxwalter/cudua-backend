
scalar DateTime

type Notification {
    notificationId: String,
    isRead: Int!
    owner: String!
    actionId: String!
    header: String
    type: String!
    message: String!
    timeStamp: DateTime!
}

type getNotificationResponse implements ResponseType {
    notification: [Notification!]
    code: Int!
    success: Boolean!
    message: String!
}

type notificationCountResponse implements ResponseType {
    count: Int!
    code: Int!
    success: Boolean!
    message: String!
}

input getBusinessNotification {
    businessId: String!
    page: Int!
}

input getCustomerNotification {
    page: Int!
}

input MarkAsReadInput {
    notificationId: String!
    # We have two types of notifications
    # customer
    # business
    type: String!
}

input businessNotificationCountInput {
    businessId: String!
}

type Query {
    GetBusinessNotification(input: getBusinessNotification): getNotificationResponse
    GetCustomerNotification(input: getCustomerNotification): getNotificationResponse

    GetCustomerNotificationCount:notificationCountResponse

    GetBusinessNotificationCount(input: businessNotificationCountInput): notificationCountResponse
}

type Mutation {
    MarkNotificationAsRead (input: MarkAsReadInput): DatalessResponse
}
