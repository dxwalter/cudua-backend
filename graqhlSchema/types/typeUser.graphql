    scalar Upload

    # response type
    interface ResponseType {
        # Response status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!
        # This is the message sent by the server about an operation
        message: String!
    }

    # This is the response type that returns no data
    type DatalessResponse implements ResponseType {
        # Response status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!
        # This is the message sent by the server about an operation
        message: String!
    }

    # This "User" type defines the queryable fields for every user in our data source.
    type User {
        # The fullname of the user must be greater than 2 characters
        fullname: String!
        # The email of the user must be greater than 5 characters and must contain the @ symbol
  		email: String!
        # This is used to check if a user is eligible to recieve email notification
  		email_notification: Int!
        #  this is the user's password. it must be greater than 5 characters
        phone: String
        # the user display picture
    	displayPicture: String
        # Business id represents the unique id of a business that was created by a user
    	businessId: String
        # This user id represents a human account (personal account)
        userId: String!
        # This is the review score for this user
        review: Float!
        # user address
        address: AddressType
    }

    # this is the address of the user
    type AddressType {
        # the user street number
        number: String
        # user street
        street: String
        # user community
        community: String
        # user lga
        lga: String
        # user state
        state: String
        # user country
        country: String
        # user bus stop
        busStop: String
    }

    type UserReview {
        authorId: String!
        fullname: String!
        displayPicture: String
    }

    # This method allows a user to reset the password without logging in
    input resetPassword {
        # this is the new password the user will provide as input and it must be greater that 5 characters
        password: String!

        # This secret key will be attached to the url the user will click from their email inbox
        secret: String!

        # this is the user's user-id. It will be attached to the url the user will click from their email inbox
        userId: String!
    }

    type UserData {
        fullname: String
  		email: String
        phone: String
    	displaPicture: String
        # Business id represents the unique id of a business that was created by a user
    	businessId: String
        # This user id represents a human account (personal account)
        userId: String
        # user review
        review: Int!
        """ 
        this is the jwt access token generated when a user logs in successfully.
        This is token is used to authenticate every logged in user. Therefore, it is attached 
        in the header object of every request sent by a logged in user.
        """
        accessToken: String!
    }

    type CreateAccountResponse implements ResponseType {
        userData: UserData
        # Api http status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!

        # This is the message sent by the server about an operation
        message: String!
    }

    type LoginResponse implements ResponseType {
        userDetails: User

        businessDetails: BusinessAccount

        # Api http status code
        code: Int!


        # This boolean value is used to check if an operation ran successfully
        success: Boolean!

        # This is the message sent by the server about an operation
        message: String!
        """ 
        this is the jwt access token generated when a user logs in successfully.
        This is token is used to authenticate every logged in user. Therefore, it is attached 
        in the header object of every request sent by a logged in user.
        """
        accessToken: String,
    }

    # anonymous login response
    type AnonymousLoginResponse {
        anonymousId: String
        code: String!
        success: Boolean!
        message: String!
    }

    # This is the input type for that will for an account to be created
    input CreateAccountInput {
        """
        This is the fullname of the user. The user can choose to give only first or
        lastname or both first and lastname. The fullname must be greater than 2 characters
        """
        fullname: String!
        # This is the email address of the user and it must be unique
        email: String!
        # This is the password of the user. It must be of at least 6 or more character length 
        password: String!
        # This is the anonymous ID of the user if it exists
        anonymousId: String
    }

    input LoginInput {
        # this is the registered email address of the user
        email: String!
        # This is the user's login password
        password: String!
        # This is the anonymous ID of the user if it exists
        anonymousId: String
    }

    input editUserContact {
        email: String
        phone: String
    }

    input editUserAddress {
        streetNumber: Int!
        streetId: String!
        busStop: String!
    }

    # edit user logo input
    input editUserDp {
        file: Upload!
    }

    # edit user's fullname
    input editCustomerFullname {
        fullname: String!
    }

    # edit users' password input
    input editCustomerPassword {
        oldPassword: String!
        newPassword: String!
    } 

    type createUserAndBusinessResponse {
        # userData
        userData: UserData
        # business details
        businessDetails: BusinessAccount
        # Api http status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!

        # This is the message sent by the server about an operation
        message: String!
    }

    # create user and business input
    input createUserAndBusinessInput {
        """
        This is the fullname of the user. The user can choose to give only first or
        lastname or both first and lastname. The fullname must be greater than 2 characters
        """
        fullname: String!
        # This is the email address of the user and it must be unique
        email: String!
        # This is the password of the user. It must be of at least 6 or more character length 
        password: String!
        # This is the anonymous ID of the user if it exists
        anonymousId: String
        # business name
        name: String!
        # business username
        # a username must be greater than 2 characters
        # it can have numbers, it can start with numbers
        # it can start can not start with all special characters except underscore
        # it can start with underscore
        # "/^(?!.*\.\.\s)(?!.*\.$)[^\W][\w.]{0,29}$/ig" remove the quote around it
        # visit this link to learn more "https://regexr.com/3cg7r"
        username: String!
    }

    #This is the mutation type that will handle create account, forgot and recover pasword
    type Mutation {
        # create a new user
        createUser(input: CreateAccountInput): CreateAccountResponse

        # create a user and a business at the same time
        createUserAndBusiness(input: createUserAndBusinessInput): createUserAndBusinessResponse

        # recover a lost or forgotten password
        recoverPassword(email: String): DatalessResponse
        # change to a new password
        resetPassword(input: resetPassword): DatalessResponse

        # this is to edit contact info of the user
        editUserContact(input: editUserContact): DatalessResponse
        
        # this is to edit user/customer's address
        editCustomerAddress(input: editUserAddress): DatalessResponse

        # edit user Dp
        editCustomerDP (input: editUserDp): DatalessResponse

        # edit customer's name
        editCustomerName (input: editCustomerFullname): DatalessResponse

        # change customers' password
        editCustomerPassword (input: editCustomerPassword): DatalessResponse
    }
    
    # The "Query" type is special: it lists all of the available queries that
    # clients can execute, along with the return type for each. In this
    # case, the "books" query returns an array of zero or more Books (defined above).

    type Query {
        # get a user
        getUser: User
        # get multiple users
        getUsers: [User]
        # log in a user
        userLogin(input: LoginInput): LoginResponse

        # get anonymous id
        GetAnonymousId: AnonymousLoginResponse
    }