    # response type
    interface ResponseType {
        # Response status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!
        # This is the message sent by the server about an operation
        message: String!
    }

    # This is the response type that returns no data
    type DatalessResponse implements ResponseType {
        # Response status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!
        # This is the message sent by the server about an operation
        message: String!
    }

    # This "User" type defines the queryable fields for every user in our data source.
    type User {
        # The fullname of the user must be greater than 2 characters
        fullname: String!
        # The email of the user must be greater than 5 characters and must contain the @ symbol
  		email: String!
        # This is used to check if a user is eligible to recieve email notification
  		email_notification: Int!
        #  this is the user's password. it must be greater than 5 characters
        phone: String
        # the user display picture
    	displaPicture: String
        # Business id represents the unique id of a business that was created by a user
    	businessId: String
        # This user id represents a human account (personal account)
        userId: String!
    }

    type UserReview {
        authorId: String!
        fullname: String!
        displaPicture: String
    }

    # This method allows a user to reset the password without logging in
    input resetPassword {
        # this is the new password the user will provide as input and it must be greater that 5 characters
        password: String!

        # This secret key will be attached to the url the user will click from their email inbox
        secret: String!

        # this is the user's user-id. It will be attached to the url the user will click from their email inbox
        userId: String!
    }

    type CreateAccountResponse implements ResponseType {
        fullname: String!
  		email: String!
        phone: String
    	displaPicture: String
        # Business id represents the unique id of a business that was created by a user
    	businessId: String
        # This user id represents a human account (personal account)
        userId: String!

        # Api http status code
        code: Int!
        # This boolean value is used to check if an operation ran successfully
        success: Boolean!

        # This is the message sent by the server about an operation
        message: String!
        """ 
        this is the jwt access token generated when a user logs in successfully.
        This is token is used to authenticate every logged in user. Therefore, it is attached 
        in the header object of every request sent by a logged in user.
        """
        accessToken: String!
    }

    type LoginResponse implements ResponseType {
        userDetails: User

        businessDetails: BusinessAccount

        # Api http status code
        code: Int!


        # This boolean value is used to check if an operation ran successfully
        success: Boolean!

        # This is the message sent by the server about an operation
        message: String!
        """ 
        this is the jwt access token generated when a user logs in successfully.
        This is token is used to authenticate every logged in user. Therefore, it is attached 
        in the header object of every request sent by a logged in user.
        """
        accessToken: String,
    }

    # This is the input type for that will for an account to be created
    input CreateAccountInput {
        """
        This is the fullname of the user. The user can choose to give only first or
        lastname or both first and lastname. The fullname must be greater than 2 characters
        """
        fullname: String!
        # This is the email address of the user and it must be unique
        email: String!
        # This is the password of the user. It must be of at least 6 or more character length 
        password: String!
    }

    input LoginInput {
        # this is the registered email address of the user
        email: String!
        # This is the user's login password
        password: String!
    }

    # The "Query" type is special: it lists all of the available queries that
    # clients can execute, along with the return type for each. In this
    # case, the "books" query returns an array of zero or more Books (defined above).

    type Query {
        # get a user
        getUser: User
        # get multiple users
        getUsers: [User]
        # log in a user
        userLogin(input: LoginInput): LoginResponse
    }

    #This is the mutation type that will handle create account, forgot and recover pasword
    type Mutation {
        # create a new user
        createUser(input: CreateAccountInput): CreateAccountResponse
        # recover a lost or forgotten password
        recoverPassword(email: String): DatalessResponse
        # change to a new password
        resetPassword(input: resetPassword): DatalessResponse
    }


    
