
# This is the type file for products
# this is the type for image upload
scalar Upload

# response type
interface ResponseType {
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

# This is the response type that returns no data
type DatalessResponse implements ResponseType {
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type Product {
    # product id
    id: String!
    # name of product
    name: String!
    # price of product
    price: Int!
    # An array of tags for a product ["tag1", "tag2", ...]
    tags: [Tag]
    # An array of colors for a product ["color1", "color2", ...]
    colors: [Color]
    # An array of sizes for a product ["size", "size1", ...]
    sizes: [Size]
    # This is used to check if a product can be seen by customers.
    # In a situation where the product is no longer in stock, a business owner can hide it and it will not be seen by customers
    # Meanwhile, a business owner will always see it from their dashboard whether it is visible or not
    # 0 means the product is visible to customers
    # 1 means the product is not visible to customers
    hide: Int!
    # An array of reviews written for this product
    reviews: [ProductReview]
    # review score for this product. It is between 1 - 5
    reviewScore: Float!
    # the category of this product. it is an object of {categoryId and categoryName}
    category: Category!
    # the subcategory of this product. it is an object of {subcategoryId and subcategoryName}
    subcategory: Subcategory!
    # this is an array of secondary images. this are the images that will show after the first (primary) image
    images: [String]
    # Primary image is the image that will show first before other images can show in the slider
    primaryImage: String!

    # product description
    description: String

    # business ID
    businessId: String
}

type Size {
    # the size of a product has an Id
    sizeId: String
    # size number can is either a string eg big and small or 12, 14, 15
    sizeNumber: String
}

type Tag {
    # tag id
    tagId: String
    # tag name
    tagName: String
}

type Color {
    # color id
    colorId: String
    # color name
    color: String
}

type CreateColorResponse implements ResponseType {
    colors: [Color]!
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type AddMorePhotoResponse implements ResponseType {
    photos: [String]!
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type CreateSizeResponse implements ResponseType {
    sizes: [Size]!
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type createProductResponse implements ResponseType {
    productId: String
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

input createProduct {
    # name of product and the length must be greater than 2 characters
    name: String!
    # the price must be greater that 0 and it is required
    price: Int!
    # the category id of the category the business chose
    category: String!
    # the subcategory id of the subcategory the business chose
    subcategory: String!
    # the primary image (Image that will show first) of the product
    file: String!
    # the business ID of the business that is uploading the product
    businessId: String!
}

input createFromInstagramInput {
    # name of product and the length must be greater than 2 characters
    name: String!
    # the price must be greater that 0 and it is required
    price: Int!
    # the category id of the category the business chose
    category: String!
    # the subcategory id of the subcategory the business chose
    subcategory: String!
    # the primary image (Image that will show first) of the product
    imagePath: String!
    # the business ID of the business that is uploading the product
    businessId: String!
    # product description
    description: String
}


input addDescription {
    # A description of the product
    description: String!
    # the product id
    productId: String!
    # the business id
    businessId: String!
}

input editProductTags {
    # an array of tags (strings). it must not be a null array
    tags: [String]!
    # the product id that owns the tags
    productId: String!
    # the id of the business that owns the product
    businessId: String!
}

input removeProductTag {
    # the tag id and not the tag name
    tagId: String!
    # the product id
    productId: String!
    # the business id
    businessId: String!
}

input removeProductSize {
    # the size id not the size name
    sizeId: String!
    # product id
    productId: String!
    # business id
    businessId: String!
}

input removeProductColor {
    # the color id and not the color name
    colorId: String!
    # product id
    productId: String!
    # business
    businessId: String!
}

input createProductSize {
    # an array of sizes (strings). it must not be a null array
    sizes: [String]!
    # product id
    productId: String!
    # business Id
    businessId: String!
}

input createProductColor {
    # an array of colors (strings). it must not be a null array
    colors: [String]!
    # product id
    productId: String!
    # business id
    businessId: String!
}

# you can only add one photo at a time
input addMorePhotos {
    # image file
    file: String!
    # product id
    productId: String!
    # business id
    businessId: String!
}

type ImageArrayResponse implements ResponseType {
    # an array of image names
    images: [String!]
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

input makePrimaryInput {
    # image name not id eg. Tammy.jpg
    imageName: String!
    # product id
    productId: String!
    # business details
    businessId: String!
}

input editBasicDetails {
    # product id
    productId: String!
    # business name
    businessId: String!
    # new name of product
    productName: String
    # new price
    productPrice: Int
    # category id
    category: String
    # subcategory id
    subcategory: String
}

input hideProduct {
    # product id
    productId: String!
    # business id
    businessId: String!
}

input deleteProduct {
    # product id
    productId: String!
    # business id
    businessId: String!
}

type SingleProductResponse {
    #  a single product
    product: Product
    # Response status code
    business: BusinessAccount
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type MultipleProductResponse {
    # an array of products
    products: [Product]
    # This is the total number of products a business has in a category
    # Not the total number of products returned from this route in a request
    totalProductsInCategoryCount: Int
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type GetMultipleProductResponse {
    # an array of products
    products: [Product]
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type BusinessSearchResultResponse {
    # an array of products
    products: [Product]
    # total number of results found.
    resultCount: Int
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}


type MultipleProductResponseSubcategory {
    # products from a subcategory
    products: [Product]
    # This is the total number of products a business has in a subcategory
    # Not the total number of products returned from this route in a request
    totalProductsInSubcategoryCount: Int
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

input productId {
    # product id
    productId: String!
}

input getBusinessProduct {
    # business Id
    businessId: String!
    page: Int!
}

input businessGetProductByCategory {
    # product id
    businessId: String!
    # category id
    categoryId: String!
    """
    Page stands for pagination.
    For everytime a request is made to this route, 12 products are returned.
    To get the next 12 products, "page" has to be set to 2.
    Set page to 1 when making your query the first time since graphql does not support default values yet.
    Subsequently, page can be incremental by 1 for more results
    Note that page increases by 1
    """
    page: Int
}


input businessGetProductBySubcategory {
    # business id
    businessId: String!
    # subcategory id
    subcategoryId: String!
    """
    Page stands for pagination.
    For everytime a request is made to this route, 12 products are returned.
    To get the next 12 products, page has to be set to 2.
    Set page to 1 when making your query the first time since graphql does not support default values yet.
    Subsequently, page can be incremental by 1 for more results
    Note that page increases by 1
    """
    page: Int
}

input businessSearchProduct {
    # product search keyword.
    keyword: String!
    # business id
    businessId: String!
}


input businessSearchbusinessProduct {
    # product search keyword.
    keyword: String!
    # business id
    businessId: String!
    # page
    page: Int!
}

input getProductSuggestionInput {
    productId: String!
    businessId: String!
}

input getProductsInCategoryInput {
    categoryId: String!
    # page
    page: Int!
}

input getProductsInSubcategoryInput {
    subcategoryId: String!
        # page
    page: Int!
}

input filterCategorySearchInput {
    page: Int!
    communityId: String!
    type: String!
    typeId: String!
}

type filterTopCategorySearchResponse {
    products: [Product]
    code: Int!
    success: Boolean!
    message: String!
}


type Query {
    # a user can get the details of a product with its reviews
    GetProductById(input: productId): SingleProductResponse
    
    # a business can get the details of a product with its reviews
    BusinessGetProductById(input: productId): SingleProductResponse

    # A business can get all the products under a category
    GetProductByCategory (input: businessGetProductByCategory): MultipleProductResponse
    
    # A business can get all the products under a subcategory
    GetProductBysubCategory(input: businessGetProductBySubcategory): MultipleProductResponseSubcategory

    # A business can search for a product she has uploaded. Please note that this search is basically a business searching for his/her product not all products uploaded to Cudua
    BusinessSearchProduct(input: businessSearchProduct): BusinessSearchResultResponse

    BusinessSearchProductByCustomer(input: businessSearchbusinessProduct): BusinessSearchResultResponse

    # Get products using business Id
    GetProductsUsingBusinessId(input: getBusinessProduct): GetMultipleProductResponse

    # Get product suggestion
    GetProductSuggestion(input: getProductSuggestionInput): GetMultipleProductResponse

    # Get all products in a category
    GetAllProductsInCategory(input: getProductsInCategoryInput): GetMultipleProductResponse

    # Get all products in a subcategory
    GetAllProductsInSubcategory(input: getProductsInSubcategoryInput): GetMultipleProductResponse


    FilterCategorySearch(input: filterCategorySearchInput): filterTopCategorySearchResponse
}


type Mutation {
    
    # create product
    CreateProduct(input: createProduct): createProductResponse

    # create product from instagram
    CreateProductFromInstagram(input: createFromInstagramInput): createProductResponse

    # edit basic details of a product like name, price, category and subcategory
    EditBasicDetails(input: editBasicDetails): DatalessResponse

    # add/edit product description
    EditDescription(input: addDescription): DatalessResponse

    # add/edit product tags
    EditProductTags(input: editProductTags): DatalessResponse

    # remove product tags
    RemoveProductTag(input: removeProductTag): DatalessResponse

    # create/edit product sizes
    CreateProductSizes(input: createProductSize): CreateSizeResponse

    # remove product sizes
    RemoveProductSize(input: removeProductSize): CreateSizeResponse

    # add/edit product colors
    CreateProductColors(input: createProductColor): CreateColorResponse

    # remove product color
    RemoveProductColor(input: removeProductColor): CreateColorResponse

    # add more photos(secondary photos) to a product
    AddmorePhotos(input: addMorePhotos): AddMorePhotoResponse

    # make an image a primary image
    MakePrimaryImage (input: makePrimaryInput): ImageArrayResponse

    # remove an image from a product
    RemoveProductPicture(input: makePrimaryInput): DatalessResponse

    # hide a product
    HideProduct(input: hideProduct): DatalessResponse

    # show a product
    ShowProduct(input: hideProduct): DatalessResponse

    # DELETE product
    DeleteProduct(input: deleteProduct): DatalessResponse
}   