
# This is the type file for products

scalar Upload

# response type
interface ResponseType {
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

# This is the response type that returns no data
type DatalessResponse implements ResponseType {
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type Product {
    id: String!
    name: String!
    price: Int!
    tags: [String]
    colors: [String]
    sizes: [String]
    hide: Int!
    reviews: [ProductReview]
    reviewScore: Float!
    category: Category!
    subcategory: Subcategory!
    images: [String]
    primaryImage: String!
}

type createProductResponse implements ResponseType {
    productId: String
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

input createProduct {
    name: String!
    price: Int!
    category: String!
    subcategory: String!
    file: Upload!
    businessId: String!
}


input addDescription {
    description: String!
    productId: String!
    businessId: String!
}

input editProductTags {
    tags: [String]!
    productId: String!
    businessId: String!
}

input removeProductTag {
    tag: String!
    productId: String!
    businessId: String!
}

input removeProductSize {
    size: String!
    productId: String!
    businessId: String!
}

input removeProductColor {
    color: String!
    productId: String!
    businessId: String!
}

input createProductSize {
    sizes: [String]!
    productId: String!
    businessId: String!
}

input createProductColor {
    colors: [String]!
    productId: String!
    businessId: String!
}

input addMorePhotos {
    file: Upload!
    productId: String!
    businessId: String!
}

type ImageArrayResponse implements ResponseType {
    images: [String!]
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

input makePrimaryInput {
    imageName: String!
    productId: String!
    businessId: String!
}

input editBasicDetails {
    productId: String!
    businessId: String!
    productName: String
    productPrice: Int
    category: String
    subcategory: String
}

input hideProduct {
    productId: String!
    businessId: String!
}

type SingleProductResponse {
    product: Product
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type MultipleProductResponse {
    products: [Product]
    # This is the total number of products a business has in a category
    # Not the total number of products returned from this route in a request
    totalProductsInCategoryCount: Int
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

type BusinessSearchResultResponse {
    products: [Product]
    resultCount: Int
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}


type MultipleProductResponseSubcategory {
    products: [Product]
    # This is the total number of products a business has in a category
    # Not the total number of products returned from this route in a request
    totalProductsInSubcategoryCount: Int
    # Response status code
    code: Int!
    # This boolean value is used to check if an operation ran successfully
    success: Boolean!
    # This is the message sent by the server about an operation
    message: String!
}

input productId {
    productId: String!
}

input businessGetProductByCategory {
    businessId: String!
    categoryId: String!
    """
    Page stands for pagination.
    For everytime a request is made to this route, 12 products are returned.
    To get the next 12 products, page has to be set to 2.
    Set page to 1 when making your query the first time since graphql does not support default values yet.
    Subsequently, page can be incremental by 1 for more results
    Note that page increases by 1
    """
    page: Int
}


input businessGetProductBySubcategory {
    businessId: String!
    subcategoryId: String!
    """
    Page stands for pagination.
    For everytime a request is made to this route, 12 products are returned.
    To get the next 12 products, page has to be set to 2.
    Set page to 1 when making your query the first time since graphql does not support default values yet.
    Subsequently, page can be incremental by 1 for more results
    Note that page increases by 1
    """
    page: Int
}

input businessSearchProduct {
    keyword: String!
    businessId: String!
}

type Query {
    # A business or a user can get the details of a product with its reviews
    GetProductById(input: productId): SingleProductResponse

    # A business can get all the products under a category
    BusinessGetProductByCategory (input: businessGetProductByCategory): MultipleProductResponse

    BusinessGetProductBysubCategory(input: businessGetProductBySubcategory): MultipleProductResponseSubcategory

    BusinessSearchProduct(input: businessSearchProduct): BusinessSearchResultResponse
}

#This is the mutation type that will handle create account, forgot and recover pasword
type Mutation {
    CreateProduct(input: createProduct): createProductResponse

    EditBasicDetails(input: editBasicDetails): DatalessResponse

    EditDescription(input: addDescription): DatalessResponse

    EditProductTags(input: editProductTags): DatalessResponse

    RemoveProductTag(input: removeProductTag): DatalessResponse

    CreateProductSizes(input: createProductSize): DatalessResponse

    RemoveProductSize(input: removeProductSize): DatalessResponse

    CreateProductColors(input: createProductColor): DatalessResponse

    RemoveProductColor(input: removeProductColor): DatalessResponse

    AddmorePhotos(input: addMorePhotos): DatalessResponse

    MakePrimaryImage (input: makePrimaryInput): ImageArrayResponse

    RemoveProductPicture(input: makePrimaryInput): DatalessResponse

    HideProduct(input: hideProduct): DatalessResponse

    ShowProduct(input: hideProduct): DatalessResponse
}   